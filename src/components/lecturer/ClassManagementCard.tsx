"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import type { Class, AttendanceRecord } from '@/lib/types';
import { Badge } from '@/components/ui/badge';
import QrCodeDisplay from './QrCodeDisplay';
import { PlayCircle, StopCircle, Edit3, Trash2, Eye, Users, MapPin, AlertTriangle } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"

interface ClassManagementCardProps {
  classInstance: Class;
  attendanceRecords: AttendanceRecord[];
  onUpdateClass: (updatedClass: Class) => void;
  onDeleteClass: (classId: string) => void;
  onViewReport: (classId: string) => void;
}

export default function ClassManagementCard({ classInstance, attendanceRecords, onUpdateClass, onDeleteClass, onViewReport }: ClassManagementCardProps) {
  const { toast } = useToast();
  const [isQrModalOpen, setIsQrModalOpen] = useState(false);

  const studentsInClass = attendanceRecords.filter(ar => ar.classId === classInstance.id).length;

  const handleToggleActive = () => {
    const updatedClass = { ...classInstance, active: !classInstance.active };
    if (updatedClass.active) {
      updatedClass.startTime = new Date().toISOString(); // Reset start time when starting
      updatedClass.endTime = undefined; // Clear end time
      // QR code will be generated by QrCodeDisplay component when active
    } else {
      updatedClass.endTime = new Date().toISOString(); // Set end time when stopping
      updatedClass.qrCodeValue = undefined; // Invalidate QR code
      updatedClass.qrCodeExpiry = undefined;
    }
    onUpdateClass(updatedClass);
    toast({ title: `Class ${updatedClass.active ? 'Started' : 'Ended'}`, description: `"${classInstance.name}" has been ${updatedClass.active ? 'started' : 'ended'}.` });
  };

  const handleQrUpdate = (updatedClass: Class) => {
    onUpdateClass(updatedClass);
  };


  return (
    <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-xl font-semibold">{classInstance.name}</CardTitle>
            <CardDescription>ID: {classInstance.id}</CardDescription>
          </div>
          <Badge variant={classInstance.active ? 'default' : 'secondary'} className={classInstance.active ? 'bg-green-500 text-white' : ''}>
            {classInstance.active ? 'Active' : 'Inactive'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        <div className="flex items-center text-sm text-muted-foreground">
          <Users className="mr-2 h-4 w-4" />
          <span>{studentsInClass} student(s) attended</span>
        </div>
        {classInstance.location && (
          <div className="flex items-center text-sm text-muted-foreground">
            <MapPin className="mr-2 h-4 w-4" />
            <span>Location-based (Threshold: {classInstance.distanceThreshold}m)</span>
          </div>
        )}
        {!classInstance.location && (
           <div className="flex items-center text-sm text-muted-foreground">
            <MapPin className="mr-2 h-4 w-4 text-orange-500" />
            <span>No location set (QR only)</span>
          </div>
        )}
        <p className="text-xs text-muted-foreground">
          Created: {new Date(classInstance.startTime).toLocaleString()}
          {classInstance.endTime && ` | Ended: ${new Date(classInstance.endTime).toLocaleString()}`}
        </p>
      </CardContent>
      <CardFooter className="flex flex-col sm:flex-row justify-between gap-2">
        <div className="flex gap-2 flex-wrap">
          <Button 
            variant={classInstance.active ? 'destructive' : 'default'} 
            size="sm" 
            onClick={handleToggleActive}
          >
            {classInstance.active ? <StopCircle className="mr-2 h-4 w-4" /> : <PlayCircle className="mr-2 h-4 w-4" />}
            {classInstance.active ? 'End Class' : 'Start Class'}
          </Button>
          <Dialog open={isQrModalOpen} onOpenChange={setIsQrModalOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm" disabled={!classInstance.active}>
                <QrCodeIcon className="mr-2 h-4 w-4" /> QR Code
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>QR Code for {classInstance.name}</DialogTitle>
                <DialogDescription>
                  Display this QR code for students to scan. It expires periodically.
                </DialogDescription>
              </DialogHeader>
              <QrCodeDisplay classInstance={classInstance} onUpdateClass={handleQrUpdate} />
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsQrModalOpen(false)}>Close</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
        <div className="flex gap-2 flex-wrap">
          <Button variant="ghost" size="sm" onClick={() => onViewReport(classInstance.id)}>
            <Eye className="mr-2 h-4 w-4" /> View Report
          </Button>
           <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="ghost" size="icon" className="text-destructive hover:bg-destructive/10 hover:text-destructive">
                <Trash2 className="h-4 w-4" />
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                <AlertDialogDescription>
                  This action cannot be undone. This will permanently delete the class
                  "{classInstance.name}" and all its associated attendance records.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction 
                  onClick={() => onDeleteClass(classInstance.id)}
                  className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"
                >
                  Delete Class
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </CardFooter>
    </Card>
  );
}

function QrCodeIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="5" height="5" x="3" y="3" rx="1" />
      <rect width="5" height="5" x="16" y="3" rx="1" />
      <rect width="5" height="5" x="3" y="16" rx="1" />
      <path d="M21 16h-3a2 2 0 0 0-2 2v3" />
      <path d="M21 21v.01" />
      <path d="M12 7v3a2 2 0 0 1-2 2H7" />
      <path d="M3 12h.01" />
      <path d="M12 3h.01" />
      <path d="M12 16v.01" />
      <path d="M16 12h.01" />
      <path d="M21 12v.01" />
      <path d="M12 21v-3a2 2 0 0 0-2-2H7" />
      <path d="M7 21h.01" />
    </svg>
  )
}
